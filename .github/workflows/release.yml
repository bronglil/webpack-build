name: Automated Release

on:
  push:
    tags:
      - '*' # Trigger the workflow on any new tag creation

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      # Step 3: Install dependencies using Yarn
      - name: Install Dependencies
        run: yarn install

      # Step 4: Run Tests
      - name: Run Tests
        run: yarn test --watchAll=false

      # Step 5: Build the project
      - name: Build the Project
        run: yarn build

      # Step 6: Generate Changelog
      - name: Generate Changelog
        id: changelog
        run: |
          # Check if there is a previous tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # No previous tag found; use the entire commit history
            CHANGELOG=$(git log --oneline --no-merges)
          else
            # Generate changelog since the last tag
            CHANGELOG=$(git log "$LAST_TAG"..HEAD --oneline --no-merges)
          fi
          echo "CHANGELOG=$CHANGELOG" >> $GITHUB_ENV
        shell: bash

      # Step 7: Create GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changelog
            ${{ env.CHANGELOG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Build Artifacts
          path: ./build
        if: success()

      # Step 9: Generate Test Reports Directory (if missing)
      - name: Ensure Test Reports Directory Exists
        run: mkdir -p ./test-reports

      # Step 10: Upload Test Reports
      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        with:
          name: Test Reports
          path: ./test-reports/junit.xml
        if: always()
